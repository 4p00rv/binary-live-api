/* eslint-disable no-unused-vars */
/* eslint-disable max-len */

type Epoch = number;

type TransactionAction = 'deposit' | 'withdrawal' | 'buy' | 'sell';

declare class ApiRequest {
    req_id?: number,
}

declare class ApiResponse {
    msg_type: string,
    req_id?: number,
    echo_req?: Object,
}

// active_symbols

declare class ActiveSymbolsRequest extends ApiRequest {
    active_symbols: 'brief' | 'full',
    landing_company?: 'japan' | 'costarica' | 'malta' | 'maltainvest' | 'iom',
}

declare class ActiveSymbol {
    symbol: string,
    intraday_interval_minutes: number,
    symbol_type: string,
    exchange_is_open: ?number,
    exchange_name: string,
    delay_amount: number,
    display_name: string,
    spot: ?number,
    spot_time: string,
    is_trading_suspended: number,
    quoted_currency_symbol: string,
    spot_age: string,
    market: string,
    market_display_name: string,
    submarket: string,
    submarket_display_name: string,
    pip: number,
}

declare class ActiveSymbolsResponse extends ApiResponse {
    active_symbolsarray: ActiveSymbol[],
}

// TODO: asset_index

// authorize

declare class AuthorizeRequest extends ApiRequest {
    authorize: string,
}

declare class AuthorizeResponse extends ApiResponse {
    authorize: {
        email: string,
        currency: string,
        balance: number,
        loginid: string,
        is_virtual: 0 | 1,
        landing_company_name: string,
        fullname: string,
    },
}

// contracts_for

// forget

declare class ForgetRequest extends ApiRequest {
    forget: string,
}

declare class ForgetResponse extends ApiResponse {
    forget: 0 | 1,
}

// forget_all

declare class ForgetAllRequest extends ApiRequest {
    forget_all: 'ticks' | 'candles' | 'proposal' | 'portfolio' | 'proposal_open_contract' | 'balance' | 'transaction' | 'pricing_table',
}

declare class ForgetAllResponse extends ApiResponse {
    forget_all: number[],
}

// get_corporate_actions

// landing_company

// landing_company_details

// new_account_virtual

// ping

declare class PingRequest extends ApiRequest {
    ping: 1,
}

declare class PingResponse extends ApiResponse {
    ping: 'pong',
}

// paymentagent_list

// payout_currencies

// proposal

// residence_list

// states_list

// ticks

// ticks_history

// time

// trading_times

// verify_email

// website_status

declare class WebsiteStatus {
    terms_conditions_version: string,
    api_call_limits: {
        max_proposal_subscription: {
            applies_to: string,
            max: number,
        },
        max_requestes_general: {
            applies_to: string,
            hourly: number,
            minutely: number,
        },
        max_requests_outcome: {
            applies_to: string,
            hourly: number,
            minutely: number,
        },
        max_requests_pricing: {
            applies_to: string,
            hourly: number,
            minutely: number,
        }
    },
    clients_country: string,
}

declare class WebsiteStatusRequest extends ApiRequest {
    website_status: 1,
}

declare class WebsiteStatusResponse extends ApiResponse {
    website_status: WebsiteStatus,
}

// get_limits

declare class AccountLimits {
    account_balance: number,
    daily_turnover: number,
    open_positions: number,
    payout: number,
    lifetime_limit: number,
    num_of_days: number,
    num_of_days_limit: number,
    remainder: number,
    withdrawal_for_x_days_monetary: number,
}

declare class AccountLimitsRequest extends ApiRequest {
    get_limits: 1,
}

declare class AccountLimitsResponse extends ApiResponse {
    get_limits: AccountLimits,
}

// get_settings

declare class AccountSettings {
    email: string,
    country: ?string,
    country_code: ?string,
    salutation: string,
    first_name: string,
    last_name: string,
    date_of_birth: ?number,
    address_line_1: string,
    address_line_2: string,
    address_city: string,
    address_state: string,
    address_postcode: string,
    phone: string,
    is_authenticated_payment_agent: number,
    jp_account_status: {
        status: 'activated' | 'jp_knowledge_test_pending' | 'jp_knowledge_test_fail' | 'jp_activation_pending' | 'disabled',
        last_test_epoch: number,
        next_test_epoch: number,
    },
    jp_settings: {
        gender: 'm' | 'f',
        occupation: 'Office worker' | 'Director' | 'Public worker' | 'Self-employed Housewife / Househusband' | 'Contract / Temporary / Part Time Student' | 'Unemployed' | 'Others',
        annual_income: 'Less than 1 million JPY' | '1-3 million JPY' | '3-5 million JPY' | '5-10 million JPY' | '10-30 million JPY' | '30-50 million JPY' | '50-100 million JPY' | 'Over 100 million JPY',
        financial_asset: 'Less than 1 million JPY' | '1-3 million JPY' | '3-5 million JPY' | '5-10 million JPY' | '10-30 million JPY' | '30-50 million JPY' | '50-100 million JPY' | 'Over 100 million JPY',
        daily_loss_limit: number,
        trading_experience_equities: 'No experience' |'Less than 6 months' | '6 months to 1 year' | '1-3 years' | '3-5 years' | 'Over 5 years',
        trading_experience_commodities: 'No experience' |'Less than 6 months' | '6 months to 1 year' | '1-3 years' | '3-5 years' | 'Over 5 years',
        trading_experience_foreign_currency_deposit: 'No experience' |'Less than 6 months' | '6 months to 1 year' | '1-3 years' | '3-5 years' | 'Over 5 years',
        trading_experience_margin_fx: 'No experience' |'Less than 6 months' | '6 months to 1 year' | '1-3 years' | '3-5 years' | 'Over 5 years',
        trading_experience_investment_trust: 'No experience' |'Less than 6 months' | '6 months to 1 year' | '1-3 years' | '3-5 years' | 'Over 5 years',
        trading_experience_public_bond: 'No experience' |'Less than 6 months' | '6 months to 1 year' | '1-3 years' | '3-5 years' | 'Over 5 years',
        trading_experience_option_trading: 'No experience' |'Less than 6 months' | '6 months to 1 year' | '1-3 years' | '3-5 years' | 'Over 5 years',
        trading_purpose: 'Targeting short-term profits' | 'Targeting medium-term / long-term profits' | 'Both the above Hedging',
        hedge_asset: 'Foreign currency deposit' | 'Margin FX' | 'Other',
        hedge_asset_amount: ?number,
    }
}

declare class AccountSettingsRequest extends ApiRequest {
    get_settings: 1,
}

declare class AccountSettingsResponse extends ApiResponse {
    get_settings: AccountSettings,
}

// get_account_status

declare class AccountStatus {
    status: string[],
    risk_classification: 'low' | 'standard' | 'high',
}

declare class AccountStatusRequest extends ApiRequest {
    get_account_status: 1,
}

declare class AccountStatusResponse extends ApiResponse {
    get_account_status: AccountStatus,
}

// balance

declare class Balance {
    balance: number,
    currency: string,
    loginid: string,
    id: string,
}

declare class BalanceRequest extends ApiRequest {
    balance: 1,
    subscribe?: 1,
}

declare class BalanceResponse extends ApiResponse {
    balance: Balance,
}

// get_self_exclusion

declare class SelfExclusionSettings {
    max_balance: number,
    max_turnover: number,
    max_losses: number,
    max_7day_turnover: number,
    max_7day_losses: number,
    max_30day_turnover: number,
    max_30day_losses: number,
    max_open_bets: number,
    session_duration_limit: number,
    exclude_until: string,
    timeout_until: number,
}

declare class SelfExclusionRequest extends ApiRequest {
    get_self_exclusion: 1,
}

declare class SelfExclusionResponse extends ApiResponse {
    get_self_exclusion: SelfExclusionSettings,
}

// login_history

declare class LoginHistoryEntry {
    time: Epoch,
    action: string,
    environment: string,
    status: 0 | 1,
}

declare class LoginHistoryRequest extends ApiRequest {
    login_history: 1,
    limit: number,
}

declare class LoginHistoryResponse extends ApiResponse {
    login_history: LoginHistoryEntry[],
}

// logout

declare class LogoutRequest extends ApiRequest {
    logout: 1,
}

declare class LogoutResponse extends ApiResponse {
    logout: number,
}

// statement

declare class StatementTransaction {
    balance_after: number,
    transaction_id: number,
    contract_id: ?number,
    transaction_time: Epoch,
    purchase_time: Epoch,
    action_type: TransactionAction,
    amount: number,
    longcode: string,
    shortcode: ?string,
    payout: ?number,
    app_id: ?number,
}

declare class StatementOptions {
    description?: 1,
    limit: number,
    offset: number,
    date_from: Epoch,
    date_to: Epoch,
    action_type: 'buy' | 'sell' | 'deposit' | 'withdrawal',
}

declare class StatementRequest extends ApiRequest, StatementOptions {
    statement: 1,
}

declare class StatementResponse extends ApiResponse {
    statement: {
        count: number,
        transactions: StatementTransaction[],
    }
}

// portfolio

declare class OpenContract {
    contract_id: number,
    transaction_id: number,
    purchase_time: Epoch,
    symbol: string,
    payout: number,
    buy_price: number,
    date_start: Epoch,
    expiry_time: Epoch,
    contract_type: ContractType,
    currency: string,
    longcode: string,
    app_id: ?number,
}

declare class PortfolioRequest extends ApiRequest {
    portfolio: 1,
}

declare class PortfolioResponse extends ApiResponse {
    portfolio: {
        contracts: OpenContract[],
    }
}

// profit_table

declare class ProfitTableTransaction {
    transaction_id: number,
    contract_id: ?number,
    purchase_time: Epoch,
    sell_time: Epoch,
    buy_price: number,
    sell_price: number,
    longcode: string,
    shortcode: string,
    payout: number,
    app_id: ?number,
}

declare class ProfitTableOptions {
    description?: 1,
    limit: number,
    offset: number,
    date_from: string,
    date_to: string,
    sort: 'ASC' | 'DESC',
}

declare class ProfitTableRequest extends ApiRequest, ProfitTableOptions {
    profit_table: 1,
}

declare class ProfitTableResponse extends ApiResponse {
    profit_table: {
        count: number,
        transactions: Transaction[],
    }
}

// proposal_open_contract

declare class PriceProposal {
    high_barrier?: number,
    low_barrier?: number,
    barrier?: number,
    original_high_barrier?: number,
    original_low_barrier?: number,
    original_barrier?: number,
    barrier_count: number,
    bid_price: number,
    contract_id: number,
    contract_type: string,
    currency: string,
    current_spot?: number,
    current_spot_time: Epoch,
    entry_spot?: number,
    date_expiry?: Epoch,
    date_settlement?: Epoch,
    date_start?: Epoch,
    id: string,
    has_corporate_actions: 0 | 1,
    is_expired: 0 | 1,
    is_forward_starting: 0 | 1,
    is_intraday: 0 | 1,
    is_path_dependent: number,
    is_valid_to_sell: 0 | 1,
    longcode: string,
    payout: number,
    shortcode: string,
    display_value: number,
    underlying: string,
    display_name: string,
    entry_tick: number,
    entry_tick_time: Epoch,
    exit_tick: number,
    exit_tick_time: Epoch,
    tick_count: number,
    validation_error?: string,
    sell_price?: number,
    buy_price: number,
    purchase_time?: Epoch,
    sell_time?: Epoch,
    sell_spot: number,
    sell_spot_time?: Epoch,
    entry_level?: number,
    amount_per_point?: string,
    stop_loss_level?: number,
    stop_profit_level?: number,
    current_level?: number,
    exit_level?: number,
    current_value_in_dollar?: number,
    current_value_in_point?: number,
    transaction_ids: string[],
}

declare class ProposalOpenContractRequest extends ApiRequest {
    proposal_open_contract: 1,
    contract_id: number,
    subscribe?: 1,
}

declare class ProposalOpenContractResponse extends ApiResponse {
    proposal_open_contract: LoginHistoryEntry[],
}

// reality_check

declare class RealityCheckSummary {
    start_time: Epoch,
    loginid: string,
    currency: string,
    buy_count: number,
    buy_amount: number,
    sell_count: number,
    sell_amount: number,
    potential_profit: number,
    open_contract_count: number,
}

declare class RealityCheckRequest extends ApiRequest {
    reality_check: 1,
}

declare class RealityCheckResponse extends ApiResponse {
    reality_check: RealityCheckSummary,
}

// transaction

declare class TrasnactionUpdate {
    balance: number,
    action: TransactionAction,
    contract_id: number,
    transaction_id: number,
    amount: number,
    id: string,
    transaction_time: Epoch,
    purchase_time: Epoch,
    currency: string,
    longcode: string,
    symbol: string,
    display_name: string,
    date_expiry: Epoch,
}

declare class TransactionRequest extends ApiRequest {
    transaction: 1,
    subscribe?: 1,
}

declare class TransactionResponse extends ApiResponse {
    transaction: TrasnactionUpdate,
}
